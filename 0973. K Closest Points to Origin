We have a list of points on the plane.  Find the K closest points to the origin (0, 0).

(Here, the distance between two points on a plane is the Euclidean distance.)

You may return the answer in any order.  The answer is guaranteed to be unique (except for the order that it is in.)

 

Example 1:

Input: points = [[1,3],[-2,2]], K = 1
Output: [[-2,2]]
Explanation: 
The distance between (1, 3) and the origin is sqrt(10).
The distance between (-2, 2) and the origin is sqrt(8).
Since sqrt(8) < sqrt(10), (-2, 2) is closer to the origin.
We only want the closest K = 1 points from the origin, so the answer is just [[-2,2]].


Example 2:

Input: points = [[3,3],[5,-1],[-2,4]], K = 2
Output: [[3,3],[-2,4]]
(The answer [[-2,4],[3,3]] would also be accepted.)


 

Note:

1 <= K <= points.length <= 10000
	-10000 < points[i][0] < 10000
	-10000 < points[i][1] < 10000
题意：给出一组点，让你找出距离原点(0,0),最近的K个点输出。

思路：使用STL容器，pair<下标，到原点距离>，然后排序，取出前K个点即可。

参考代码：
--------------------- 
bool cmp(pair<int,int> a,pair<int,int> b){
    return a.second<b.second;
}
class Solution {
public:
   vector<vector<int>> kClosest(vector<vector<int>>& points, int K) {
        vector<pair<int,int>> v;
       for(int i=0;i<points.size();i++){
           v.push_back(make_pair(i,points[i][0]*points[i][0]+points[i][1]*points[i][1]));
       }
       sort(v.begin(),v.end(),cmp);
       vector<vector<int>> ans;
       for(int i=0;i<points.size()&&i<K;i++){
           ans.push_back(points[v[i].first]);
       }
       return ans;
    }
};
