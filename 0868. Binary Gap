Given a positive integer N, find and return the longest distance between two consecutive 1's in the binary representation of N.
If there aren't two consecutive 1's, return 0.
 

Example 1:
Input: 22
Output: 2
Explanation: 
22 in binary is 0b10110.
In the binary representation of 22, there are three ones, and two consecutive pairs of 1's.
The first consecutive pair of 1's have distance 2.
The second consecutive pair of 1's have distance 1.
The answer is the largest of these two distances, which is 2.
Example 2:
Input: 5
Output: 2
Explanation: 
5 in binary is 0b101.
Example 3:
Input: 6
Output: 1
Explanation: 
6 in binary is 0b110.
Example 4:
Input: 8
Output: 0
Explanation: 
8 in binary is 0b1000.
There aren't any consecutive pairs of 1's in the binary representation of 8, so we return 0.
 
Note:
1 <= N <= 10^9

题意：给出一个整形数N，让你在它的二进制表达式中找出两个连续1的最大距离。

思路：首先将N转成二进制保存在字符串中，然后求最大距离。

参考代码：

class Solution {
public:
    int binaryGap(int N) {
        string s="";
        do{
            s+=N%2+'0';
            N/=2;
        }while(N);
        int idx=s.find('1'),ans=0;
        for(int i=idx+1;i<s.size();i++){
            if(s[i]=='1'){
                ans=max(ans,i-idx);
                idx=i;
            }
        }
        return ans;
    }
};
