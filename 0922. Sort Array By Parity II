Given an array A of non-negative integers, half of the integers in A are odd, and half of the integers are even.
Sort the array so that whenever A[i] is odd, i is odd; and whenever A[i] is even, i is even.
You may return any answer array that satisfies this condition.
 
Example 1:
Input: [4,2,5,7]
Output: [4,5,2,7]
Explanation: [4,7,2,5], [2,5,4,7], [2,7,4,5] would also have been accepted.
 
Note:
2 <= A.length <= 20000
A.length % 2 == 0
0 <= A[i] <= 1000

思路：使用双指针i，j都从左往右遍历，i寻找偶数下标错误，j寻找奇数下标错误，然后交换二者。

参考代码：
class Solution {
public:
    vector<int> sortArrayByParityII(vector<int>& A) {
        int i=0,j=1,n=A.size();
        while(i<A.size()&&j<A.size()){
            while(i<n&&A[i]%2==0) i+=2;
            while(j<n&&A[j]%2==1) j+=2;
            if(i<n&&j<n){
                swap(A[i],A[j]);
		        i+=2;j+=2;
            }
        }
        return A;
    }
};
