You have an array of logs.  Each log is a space delimited string of words.

For each log, the first word in each log is an alphanumeric identifier.  Then, either:

Each word after the identifier will consist only of lowercase letters, or;
	Each word after the identifier will consist only of digits.
We will call these two varieties of logs letter-logs and digit-logs.  It is guaranteed that each log has at least one word after its identifier.

Reorder the logs so that all of the letter-logs come before any digit-log.  The letter-logs are ordered lexicographically ignoring identifier, with the identifier used in case of ties.  The digit-logs should be put in their original order.

Return the final order of the logs.

 

Example 1:

Input: ["a1 9 2 3 1","g1 act car","zo4 4 7","ab1 off key dog","a8 act zoo"]
Output: ["g1 act car","a8 act zoo","ab1 off key dog","a1 9 2 3 1","zo4 4 7"]


 

Note:

0 <= logs.length <= 100
	3 <= logs[i].length <= 100
	logs[i] is guaranteed to have an identifier, and a word after the identifier.
题意：给出两种日志，一种字母日志，一种数字日志，每种日志的第一个单词为鉴别器，不参与比较，让你把所有字母日志按顺序排序，而数字日志保持原相对顺序不变。

思路：使用stable_sort（）排序，自己编写排序函数，只排字目不排序数字即可。

参考代码：
--------------------- 
bool cmp(string a,string b){
    int id1 = a.find(' ')+1;
        int id2 = b.find(' ')+1;
        bool c1 = a[id1]>='a' && a[id1]<='z';
        bool c2 = b[id2]>='a' && b[id2]<='z';
        if(!c1 && !c2)return false;
        if(c1 && !c2)return true;
        if(!c1 && c2)return false;
        return a.substr(id1)<b.substr(id2);
    }
class Solution {
public:   
    vector<string> reorderLogFiles(vector<string>& logs) {
        stable_sort(logs.begin(),logs.end(),cmp);
        return logs;
    }
};
